{"code":"import React, { forwardRef, useMemo, useCallback } from 'react';\r\n// 双向绑定工具方法\r\n// const withModel = (component) => {}\r\nconst withModel = (Component) => forwardRef((props, outerRef) => {\r\n    const p = {\r\n        models: [],\r\n        name: '',\r\n        value: '',\r\n        onChange: (event) => { },\r\n        type: 'text',\r\n        ...props,\r\n    };\r\n    const { models = [], name, value, onChange, type, ...other } = p;\r\n    const [modelValue, setModelValue] = useMemo(() => models, [models]);\r\n    const handleChange = useCallback((event) => {\r\n        if (setModelValue) {\r\n            const setValue = setModelValue;\r\n            setValue(event.target.value);\r\n        }\r\n        if (typeof onChange === 'function')\r\n            onChange(event);\r\n    }, [onChange]);\r\n    // 清空内容函数\r\n    const cleanContent = () => {\r\n        if (setModelValue) {\r\n            const setValue = setModelValue;\r\n            setValue('');\r\n        }\r\n    };\r\n    // \r\n    const ot = {\r\n        type,\r\n        cleanContent,\r\n        ...other\r\n    };\r\n    return (React.createElement(Component, { ...ot, ref: outerRef, name: name, value: modelValue !== undefined ? modelValue : value, onChange: handleChange }));\r\n});\r\nexport default withModel;\r\n","references":["D:/project/orui-ui/node_modules/@types/react/index.d.ts"],"dts":{"name":"D:/project/orui-ui/packages/orui-react/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/withModel.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\ndeclare const withModel: (Component: any) => React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;\r\nexport default withModel;\r\n"}}
