{"value":{"content":"var _excluded = [\"models\", \"name\", \"value\", \"onChange\", \"type\"];\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { forwardRef, useMemo, useCallback } from 'react'; // 双向绑定工具方法\n// const withModel = (component) => {}\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar withModel = function withModel(Component) {\n  return /*#__PURE__*/forwardRef(function (props, outerRef) {\n    var p = _objectSpread({\n      models: [],\n      name: '',\n      value: '',\n      onChange: function onChange(event) {},\n      type: 'text'\n    }, props);\n\n    var _p$models = p.models,\n        models = _p$models === void 0 ? [] : _p$models,\n        name = p.name,\n        value = p.value,\n        onChange = p.onChange,\n        type = p.type,\n        other = _objectWithoutProperties(p, _excluded);\n\n    var _useMemo = useMemo(function () {\n      return models;\n    }, [models]),\n        _useMemo2 = _slicedToArray(_useMemo, 2),\n        modelValue = _useMemo2[0],\n        setModelValue = _useMemo2[1];\n\n    var handleChange = useCallback(function (event) {\n      if (setModelValue) {\n        var setValue = setModelValue;\n        setValue(event.target.value);\n      }\n\n      if (typeof onChange === 'function') onChange(event);\n    }, [onChange]); // 清空内容函数\n\n    var cleanContent = function cleanContent() {\n      if (setModelValue) {\n        var setValue = setModelValue;\n        setValue('');\n      }\n    }; // \n\n\n    var ot = _objectSpread({\n      type: type,\n      cleanContent: cleanContent\n    }, other);\n\n    return /*#__PURE__*/_jsx(Component, _objectSpread(_objectSpread({}, ot), {}, {\n      ref: outerRef,\n      name: name,\n      value: modelValue !== undefined ? modelValue : value,\n      onChange: handleChange\n    }));\n  });\n};\n\nexport default withModel;","options":{"ext":".js","declaration":true}},"type":"Object"}